#!/usr/bin/env python3
"""
AnComicsViewer - Version CLI simple pour tester le nouveau mod√®le
"""

import sys
import cv2
import numpy as np
from pathlib import Path
from ultralytics import YOLO

def test_on_comic_page(pdf_path: str | None = None, image_path: str | None = None):
    """Test du mod√®le sur une page de BD"""
    
    print("üöÄ AnComicsViewer - Test du mod√®le YOLOv8 Multi-BD Enhanced v2")
    print("=" * 60)
    
    # Charger le mod√®le
    model_path = "detectors/models/multibd_enhanced_v2.pt"
    print(f"üì¶ Chargement du mod√®le: {model_path}")
    model = YOLO(model_path)
    
    # D√©terminer l'image √† tester
    if image_path:
        test_image = image_path
    elif pdf_path:
        print(f"üìñ PDF sp√©cifi√©: {pdf_path}")
        print("‚ö†Ô∏è  Conversion PDF ‚Üí image non impl√©ment√©e dans cette version test")
        print("üí° Utilisez directement une image avec --image")
        return
    else:
        # Utiliser une image du dataset de validation
        test_image = "dataset/images/val/p0002.png"
        
    print(f"üì∏ Test sur: {test_image}")
    
    if not Path(test_image).exists():
        print(f"‚ùå Image introuvable: {test_image}")
        return
        
    # Charger et analyser l'image
    image = cv2.imread(test_image)
    if image is None:
        print(f"‚ùå Impossible de charger l'image: {test_image}")
        return
    height, width = image.shape[:2]
    print(f"üñºÔ∏è  Dimensions: {width}x{height}")
    
    # Faire la d√©tection
    print("ü§ñ D√©tection des panels en cours...")
    results = model(test_image, conf=0.15, iou=0.6, imgsz=1280, device='mps')
    
    if results and len(results) > 0:
        result = results[0]
        boxes = result.boxes
        
        if boxes is not None and len(boxes) > 0:
            print(f"üéØ {len(boxes)} panels d√©tect√©s!")
            print("\nüìã D√©tails des panels:")
            
            for i, box in enumerate(boxes):
                conf = float(box.conf[0])
                cls = int(box.cls[0])
                xyxy = box.xyxy[0].cpu().numpy()
                
                x1, y1, x2, y2 = xyxy
                w, h = x2 - x1, y2 - y1
                
                class_name = "panel" if cls == 0 else f"class_{cls}"
                print(f"  Panel {i+1}:")
                print(f"    ‚Ä¢ Classe: {class_name}")
                print(f"    ‚Ä¢ Confiance: {conf:.3f}")
                print(f"    ‚Ä¢ Position: ({x1:.0f}, {y1:.0f}) ‚Üí ({x2:.0f}, {y2:.0f})")
                print(f"    ‚Ä¢ Taille: {w:.0f}x{h:.0f} px")
                print()
                
            # Sauvegarder l'image avec les d√©tections
            output_path = f"detection_result_{Path(test_image).stem}.jpg"
            annotated = result.plot()
            cv2.imwrite(output_path, annotated)
            print(f"üíæ R√©sultat sauvegard√©: {output_path}")
            
        else:
            print("‚ö†Ô∏è  Aucun panel d√©tect√©")
    else:
        print("‚ùå Erreur lors de la d√©tection")

def main():
    """Point d'entr√©e principal"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="AnComicsViewer CLI - Test du mod√®le YOLOv8",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python test_cli.py                                    # Test sur image par d√©faut
  python test_cli.py --image mon_comic.jpg              # Test sur image sp√©cifique
  python test_cli.py --pdf mon_comic.pdf                # Test sur PDF (√† venir)
        """
    )
    
    parser.add_argument("--image", "-i", 
                       help="Chemin vers une image de BD √† analyser")
    parser.add_argument("--pdf", "-p",
                       help="Chemin vers un PDF de BD √† analyser")
    
    args = parser.parse_args()
    
    try:
        test_on_comic_page(pdf_path=args.pdf, image_path=args.image)
        print("\n‚úÖ Test termin√© avec succ√®s!")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Test interrompu par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
