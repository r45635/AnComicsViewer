#!/usr/bin/env python3
"""
Multi-BD Enhanced v2 - Script d'Entra√Ænement Final Optimis√©
===========================================================
Entra√Ænement optimis√© avec support MPS et pr√©vention des timeouts NMS.
Version finale apr√®s validation du pipeline complet.
"""

import os
import sys
import torch
import warnings
from pathlib import Path

def setup_environment():
    """Configuration optimale de l'environnement d'entra√Ænement"""
    print("üöÄ Multi-BD Enhanced v2 - Entra√Ænement Final Optimis√©")
    print("=" * 60)
    
    # Configuration Apple Silicon MPS optimis√©e
    print("üçé Configuration Apple Silicon MPS...")
    if torch.backends.mps.is_available():
        os.environ['PYTORCH_ENABLE_MPS_FALLBACK'] = '1'
        os.environ['PYTORCH_MPS_HIGH_WATERMARK_RATIO'] = '0.0'
        print("   ‚úÖ Apple Silicon MPS activ√©")
        print(f"   üîß MPS Fallback: {os.environ.get('PYTORCH_ENABLE_MPS_FALLBACK')}")
    else:
        print("   ‚ö†Ô∏è  MPS non disponible, utilisation CPU/CUDA")
    
    # Optimisations PyTorch
    torch.backends.cudnn.benchmark = True
    torch.backends.cudnn.deterministic = False
    
    # Suppression des warnings non critiques
    warnings.filterwarnings('ignore', category=UserWarning)
    warnings.filterwarnings('ignore', category=FutureWarning)
    
    return True

def patch_ultralytics():
    """Patch pour r√©soudre le probl√®me weights_only avec YOLO"""
    try:
        import ultralytics.nn.tasks
        original_torch_load = torch.load
        
        def patched_torch_load(*args, **kwargs):
            kwargs.pop('weights_only', None)  # Supprime weights_only si pr√©sent
            return original_torch_load(*args, **kwargs)
        
        torch.load = patched_torch_load
        print("   üîß Patch PyTorch load appliqu√©")
        return True
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Patch PyTorch: {e}")
        return False

def main():
    """Fonction principale d'entra√Ænement optimis√©e"""
    try:
        # Configuration environnement
        setup_environment()
        
        # Configuration dataset
        dataset_path = "dataset/multibd_enhanced.yaml"
        print(f"üìä Dataset: {dataset_path}")
        
        # Patch Ultralytics
        patch_ultralytics()
        
        # Import YOLO apr√®s configuration
        from ultralytics import YOLO
        
        # Chargement mod√®le
        print("ü§ñ Chargement mod√®le YOLOv8s...")
        model = YOLO('yolov8s.pt')
        print("   ‚úÖ YOLOv8s charg√© avec succ√®s")
        
        # D√©tection device optimal
        device = 'mps' if torch.backends.mps.is_available() else 'cuda' if torch.cuda.is_available() else 'cpu'
        print(f"üéØ Device s√©lectionn√©: {device}")
        
        # Configuration d'entra√Ænement optimis√©e
        print("üéØ D√©marrage entra√Ænement avec optimisations compl√®tes...")
        
        # Entra√Ænement avec param√®tres optimis√©s
        results = model.train(
            # Dataset et projet
            data=dataset_path,
            project='runs/multibd_enhanced_v2',
            name='yolov8s-final-optimized',
            
            # Param√®tres d'entra√Ænement
            epochs=200,
            batch=16,
            imgsz=1280,
            device=device,
            
            # Optimisations apprentissage
            lr0=0.01,
            lrf=0.01,
            momentum=0.937,
            weight_decay=0.0005,
            warmup_epochs=3.0,
            warmup_momentum=0.8,
            warmup_bias_lr=0.1,
            
            # Optimisations NMS (√©viter timeouts)
            conf=0.15,        # Seuil de confiance optimis√©
            iou=0.60,         # IoU threshold pour NMS
            max_det=200,      # Limite d√©tections par image
            
            # Augmentations donn√©es
            hsv_h=0.015,
            hsv_s=0.4,
            hsv_v=0.4,
            degrees=0.0,
            translate=0.02,
            scale=0.5,
            shear=0.0,
            perspective=0.0,
            flipud=0.0,
            fliplr=0.5,
            mosaic=0.1,       # Mosaic r√©duit pour √©viter artefacts
            mixup=0.0,
            copy_paste=0.0,
            
            # Configuration entra√Ænement
            cache='ram',
            workers=0,        # Optimis√© pour MPS
            patience=50,
            save_period=-1,
            seed=42,
            deterministic=True,
            
            # Options de sortie
            plots=True,
            val=True,
            save=True,
            exist_ok=True,
            verbose=True
        )
        
        print("\nüéâ Entra√Ænement termin√© avec succ√®s!")
        if hasattr(results, 'save_dir'):
            print(f"üìÅ R√©sultats sauvegard√©s dans: {results.save_dir}")
        
        # Affichage m√©triques finales
        if hasattr(results, 'results_dict'):
            metrics = results.results_dict
            print("\nüìä M√©triques finales:")
            print(f"   üìà mAP50: {metrics.get('metrics/mAP50(B)', 'N/A')}")
            print(f"   üìà mAP50-95: {metrics.get('metrics/mAP50-95(B)', 'N/A')}")
        
        return results
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Entra√Ænement interrompu par l'utilisateur")
        return None
    except Exception as e:
        print(f"\n‚ùå Erreur pendant l'entra√Ænement: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    # V√©rification pr√©requis
    if not Path("dataset/multibd_enhanced.yaml").exists():
        print("‚ùå Dataset non trouv√©: dataset/multibd_enhanced.yaml")
        sys.exit(1)
    
    # Lancement entra√Ænement
    results = main()
    
    if results:
        print("\n‚úÖ Script d'entra√Ænement termin√© avec succ√®s")
        sys.exit(0)
    else:
        print("\n‚ùå Script d'entra√Ænement termin√© avec erreurs")
        sys.exit(1)
