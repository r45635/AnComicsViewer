#!/usr/bin/env python3
"""
Surveillance de l'entra√Ænement Multi-BD Enhanced v2
Suit les m√©triques et progr√®s en temps r√©el
"""

import time
import os
from pathlib import Path
import matplotlib.pyplot as plt
import pandas as pd
import sys

def monitor_training():
    """Surveille les m√©triques d'entra√Ænement."""
    print("üìä Surveillance Entra√Ænement Multi-BD Enhanced v2")
    print("=" * 60)
    
    results_dir = Path("runs/detect/multibd_enhanced_v2")
    results_file = results_dir / "results.csv"
    
    if not results_dir.exists():
        print("‚è≥ En attente du d√©marrage de l'entra√Ænement...")
        
    last_epoch = -1
    
    while True:
        try:
            if results_file.exists():
                # Lire les r√©sultats
                df = pd.read_csv(results_file)
                df.columns = df.columns.str.strip()  # Nettoyer les noms de colonnes
                
                current_epoch = len(df) - 1
                
                if current_epoch > last_epoch:
                    last_epoch = current_epoch
                    
                    # Derni√®re √©poque
                    latest = df.iloc[-1]
                    
                    print(f"\nüéØ √âpoque {current_epoch + 1}/150")
                    print(f"   üìà Train Loss: {latest.get('train/box_loss', 0):.4f}")
                    print(f"   üìâ Val Loss: {latest.get('val/box_loss', 0):.4f}")
                    print(f"   üé™ mAP50: {latest.get('metrics/mAP50(B)', 0):.4f}")
                    print(f"   üéØ mAP50-95: {latest.get('metrics/mAP50-95(B)', 0):.4f}")
                    print(f"   ‚ö° Precision: {latest.get('metrics/precision(B)', 0):.4f}")
                    print(f"   üîç Recall: {latest.get('metrics/recall(B)', 0):.4f}")
                    
                    # Meilleure performance jusqu'√† pr√©sent
                    best_map50 = df['metrics/mAP50(B)'].max()
                    best_epoch = df['metrics/mAP50(B)'].idxmax()
                    
                    print(f"   üèÜ Meilleur mAP50: {best_map50:.4f} (√©poque {best_epoch + 1})")
                    
                    # Graphique de progression simple
                    if current_epoch >= 5 and current_epoch % 10 == 0:
                        create_progress_plot(df, current_epoch)
                        
            else:
                print("‚è≥ Fichier de r√©sultats non encore cr√©√©...")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lecture m√©triques: {e}")
            
        time.sleep(30)  # V√©rifier toutes les 30 secondes

def create_progress_plot(df, current_epoch):
    """Cr√©e un graphique de progression."""
    try:
        plt.figure(figsize=(12, 8))
        
        # Loss
        plt.subplot(2, 2, 1)
        plt.plot(df.index, df['train/box_loss'], label='Train Loss')
        plt.plot(df.index, df['val/box_loss'], label='Val Loss')
        plt.title('Loss Evolution')
        plt.xlabel('√âpoque')
        plt.ylabel('Loss')
        plt.legend()
        plt.grid(True)
        
        # mAP
        plt.subplot(2, 2, 2)
        plt.plot(df.index, df['metrics/mAP50(B)'], label='mAP50')
        plt.plot(df.index, df['metrics/mAP50-95(B)'], label='mAP50-95')
        plt.title('mAP Evolution')
        plt.xlabel('√âpoque')
        plt.ylabel('mAP')
        plt.legend()
        plt.grid(True)
        
        # Precision/Recall
        plt.subplot(2, 2, 3)
        plt.plot(df.index, df['metrics/precision(B)'], label='Precision')
        plt.plot(df.index, df['metrics/recall(B)'], label='Recall')
        plt.title('Precision/Recall Evolution')
        plt.xlabel('√âpoque')
        plt.ylabel('Score')
        plt.legend()
        plt.grid(True)
        
        # F1 Score (calcul√©)
        plt.subplot(2, 2, 4)
        precision = df['metrics/precision(B)']
        recall = df['metrics/recall(B)']
        f1 = 2 * (precision * recall) / (precision + recall)
        plt.plot(df.index, f1, label='F1 Score', color='green')
        plt.title('F1 Score Evolution')
        plt.xlabel('√âpoque')
        plt.ylabel('F1 Score')
        plt.legend()
        plt.grid(True)
        
        plt.tight_layout()
        
        # Sauver le graphique
        plot_path = f"runs/detect/multibd_enhanced_v2/progress_epoch_{current_epoch}.png"
        plt.savefig(plot_path, dpi=150, bbox_inches='tight')
        plt.close()
        
        print(f"   üìä Graphique sauv√©: {plot_path}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur cr√©ation graphique: {e}")

def print_final_summary():
    """Affiche un r√©sum√© final quand l'entra√Ænement est termin√©."""
    results_dir = Path("runs/detect/multibd_enhanced_v2")
    results_file = results_dir / "results.csv"
    
    if not results_file.exists():
        print("‚ùå Pas de r√©sultats trouv√©s")
        return
        
    try:
        df = pd.read_csv(results_file)
        df.columns = df.columns.str.strip()
        
        print("\nüéâ R√©sum√© Final Multi-BD Enhanced v2")
        print("=" * 50)
        
        # Meilleures m√©triques
        best_map50 = df['metrics/mAP50(B)'].max()
        best_map50_epoch = df['metrics/mAP50(B)'].idxmax()
        best_map50_95 = df['metrics/mAP50-95(B)'].max()
        
        final_epoch = len(df) - 1
        final_map50 = df.iloc[-1]['metrics/mAP50(B)']
        final_map50_95 = df.iloc[-1]['metrics/mAP50-95(B)']
        
        print(f"üìä Performances Finales:")
        print(f"   ‚Ä¢ √âpoques compl√©t√©es: {final_epoch + 1}")
        print(f"   ‚Ä¢ mAP50 final: {final_map50:.4f}")
        print(f"   ‚Ä¢ mAP50-95 final: {final_map50_95:.4f}")
        
        print(f"\nüèÜ Meilleures Performances:")
        print(f"   ‚Ä¢ Meilleur mAP50: {best_map50:.4f} (√©poque {best_map50_epoch + 1})")
        print(f"   ‚Ä¢ Meilleur mAP50-95: {best_map50_95:.4f}")
        
        # Comparaison avec la version pr√©c√©dente
        print(f"\nüìà Am√©lioration vs v1:")
        print(f"   ‚Ä¢ v1 mAP50: 91.1%")
        print(f"   ‚Ä¢ v2 mAP50: {best_map50*100:.1f}%")
        
        if best_map50 > 0.911:
            improvement = (best_map50 - 0.911) * 100
            print(f"   ‚Ä¢ Am√©lioration: +{improvement:.1f}% üéâ")
        else:
            decline = (0.911 - best_map50) * 100
            print(f"   ‚Ä¢ R√©gression: -{decline:.1f}% ‚ö†Ô∏è")
            
        # Fichiers de mod√®le
        best_model = results_dir / "weights" / "best.pt"
        last_model = results_dir / "weights" / "last.pt"
        
        print(f"\nüìÅ Mod√®les Sauv√©s:")
        if best_model.exists():
            print(f"   ‚úÖ Meilleur mod√®le: {best_model}")
        if last_model.exists():
            print(f"   ‚úÖ Dernier mod√®le: {last_model}")
            
        print(f"\nüîß Prochaines √âtapes:")
        print(f"   1. Copier le meilleur mod√®le:")
        print(f"      cp {best_model} detectors/models/multibd_enhanced_v2.pt")
        print(f"   2. Mettre √† jour le d√©tecteur dans AnComicsViewer")
        print(f"   3. Tester les nouvelles performances")
        
    except Exception as e:
        print(f"‚ùå Erreur lecture r√©sum√©: {e}")

def main():
    """Point d'entr√©e principal."""
    if len(sys.argv) > 1 and sys.argv[1] == "summary":
        print_final_summary()
        return
        
    try:
        monitor_training()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Surveillance interrompue")
        print_final_summary()

if __name__ == "__main__":
    main()
