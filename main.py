#!/usr/bin/env python3
"""
AnComicsViewer - Main Entry Point
==================================

üìñ Lecteur PDF pour bandes dessin√©es avec d√©tection intelligente de cases
ü§ñ D√©tection ML multi-styles (Golden City, Tintin, Pin-up) + navigation cross-page
üéØ Interface moderne PySide6 avec overlay interactif des panels

Auteur: Vincent Cruvellier
License: MIT
Repository: https://github.com/r45635/AnComicsViewer
"""

import os
import sys
import subprocess
from pathlib import Path

# Ajouter le r√©pertoire du script au PYTHONPATH
SCRIPT_DIR = Path(__file__).parent.absolute()
sys.path.insert(0, str(SCRIPT_DIR))

def get_version():
    """R√©cup√®re la version depuis Git ou fallback."""
    try:
        # Essayer de r√©cup√©rer la version Git
        result = subprocess.run(
            ["git", "describe", "--tags", "--long", "--dirty"],
            cwd=SCRIPT_DIR,
            capture_output=True,
            text=True,
            timeout=5
        )
        if result.returncode == 0:
            version = result.stdout.strip()
            # Convertir v2.0.0-3-gbd5772c en v2.0.0+3.bd5772c
            if '-g' in version:
                parts = version.split('-')
                if len(parts) >= 3:
                    tag = parts[0]  # v2.0.0
                    commits = parts[1]  # 3
                    commit_hash = parts[2]  # gbd5772c
                    if parts[-1] == 'dirty':
                        return f"{tag}+{commits}.{commit_hash}.dirty"
                    else:
                        return f"{tag}+{commits}.{commit_hash}"
            return version
    except Exception:
        pass
    
    # Fallback vers une version statique
    return "v2.0.0+dev"

def check_environment():
    """V√©rifie l'environnement Python et les d√©pendances critiques."""
    errors = []
    
    # V√©rifier Python version
    if sys.version_info < (3, 8):
        errors.append(f"‚ùå Python 3.8+ requis, trouv√©: {sys.version}")
    
    # V√©rifier les d√©pendances critiques
    critical_deps = ['PySide6', 'numpy', 'cv2']
    for dep in critical_deps:
        try:
            __import__(dep)
        except ImportError:
            errors.append(f"‚ùå Module manquant: {dep}")
    
    return errors

def main():
    """Point d'entr√©e principal d'AnComicsViewer."""
    
    print("üé® AnComicsViewer - Lecteur PDF Comics Intelligent")
    print(f"üì¶ Version: {get_version()}")
    print(f"üêç Python: {sys.version.split()[0]}")
    print(f"üìÅ R√©pertoire: {SCRIPT_DIR}")
    print("-" * 60)
    
    # V√©rification de l'environnement
    env_errors = check_environment()
    if env_errors:
        print("üí• Erreurs d'environnement d√©tect√©es:")
        for error in env_errors:
            print(f"   {error}")
        print("\nüí° Solutions:")
        print("   ‚Ä¢ Installer les d√©pendances: pip install -r requirements.txt")
        print("   ‚Ä¢ Utiliser l'environnement virtuel: ./run.sh")
        print("   ‚Ä¢ V√©rifier la documentation: README.md")
        return 1
    
    # Import et lancement de l'application
    try:
        print("üöÄ Chargement de l'application...")
        
        # Configurer l'ic√¥ne pour l'application
        os.environ['ANCOMICSVIEWER_ICON'] = str(SCRIPT_DIR / "icon.ico")
        
        # Importer et lancer AnComicsViewer
        from AnComicsViewer import main as app_main
        
        print("‚úÖ Interface utilisateur initialis√©e")
        print("üìñ Pr√™t √† ouvrir des fichiers PDF!")
        print("üí° Utilisez Ctrl+O pour ouvrir un fichier ou glissez-d√©posez")
        
        return app_main()
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("üí° V√©rifiez que toutes les d√©pendances sont install√©es")
        return 1
    except Exception as e:
        print(f"üí• Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    # Configurer l'environnement pour une meilleure compatibilit√©
    if sys.platform == "darwin":  # macOS
        # Am√©liorer la compatibilit√© Qt sur macOS
        if "QT_MAC_WANTS_LAYER" not in os.environ:
            os.environ["QT_MAC_WANTS_LAYER"] = "1"
    
    # Point d'entr√©e
    sys.exit(main())
