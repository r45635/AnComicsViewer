#!/usr/bin/env python3
"""
Diagnostic et am√©lioration du mod√®le Multi-BD
============================================

Ce script analyse les probl√®mes du mod√®le Multi-BD et propose des am√©liorations :
1. Diagnostic des classes mal pr√©dites
2. Analyse de la pr√©cision des contours 
3. Am√©lioration des param√®tres de d√©tection
4. Test de diff√©rents mod√®les disponibles
"""

import os
import sys
import cv2
import numpy as np
from pathlib import Path
from typing import List, Dict, Tuple
import json

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from detectors.multibd_detector import MultiBDPanelDetector
    from ultralytics import YOLO
    import torch
except ImportError as e:
    print(f"‚ùå D√©pendances manquantes: {e}")
    print("üí° Installez avec: pip install ultralytics torch")
    sys.exit(1)

class MultiBDDiagnostic:
    """Outil de diagnostic et am√©lioration du mod√®le Multi-BD."""
    
    def __init__(self):
        self.models_dir = Path("runs/detect")
        self.dataset_dir = Path("dataset")
        self.available_models = self._find_available_models()
        
    def _find_available_models(self) -> Dict[str, Path]:
        """Trouve tous les mod√®les disponibles."""
        models = {}
        for model_dir in self.models_dir.glob("*/weights/best.pt"):
            name = model_dir.parent.parent.name
            models[name] = model_dir
        return models
    
    def list_available_models(self):
        """Affiche tous les mod√®les disponibles."""
        print("üîç Mod√®les disponibles:")
        for name, path in self.available_models.items():
            size = path.stat().st_size / (1024*1024)  # MB
            print(f"  üì¶ {name}: {path} ({size:.1f} MB)")
        print()
    
    def analyze_model_performance(self, model_name: str = "multibd_mixed_model"):
        """Analyse les performances d'un mod√®le."""
        if model_name not in self.available_models:
            print(f"‚ùå Mod√®le '{model_name}' non trouv√©")
            return
            
        model_path = self.available_models[model_name]
        print(f"üî¨ Analyse du mod√®le: {model_name}")
        print(f"üìÇ Chemin: {model_path}")
        
        try:
            # Charger le mod√®le
            detector = MultiBDPanelDetector(weights=str(model_path))
            
            # Afficher les infos du mod√®le
            info = detector.get_model_info()
            print(f"üìä Performance rapport√©e:")
            for key, value in info['performance'].items():
                print(f"  {key}: {value}")
            
            print(f"üéØ Classes: {info['classes']}")
            print(f"üîß Confidence: {info['confidence']}")
            print(f"üîß IoU: {info['iou_threshold']}")
            
        except Exception as e:
            print(f"‚ùå Erreur chargement mod√®le: {e}")
    
    def test_detection_parameters(self, model_name: str = "multibd_mixed_model"):
        """Test diff√©rents param√®tres de d√©tection."""
        if model_name not in self.available_models:
            print(f"‚ùå Mod√®le '{model_name}' non trouv√©")
            return
            
        model_path = self.available_models[model_name]
        print(f"üß™ Test des param√®tres de d√©tection")
        
        # Param√®tres √† tester
        conf_values = [0.1, 0.2, 0.3, 0.4, 0.5]
        iou_values = [0.3, 0.4, 0.5, 0.6, 0.7]
        
        # Chercher une image de test
        test_images = list(self.dataset_dir.glob("**/train/*.png"))[:3]  # 3 premi√®res images
        
        if not test_images:
            print("‚ùå Aucune image de test trouv√©e dans dataset/")
            return
            
        results = []
        
        for conf in conf_values:
            for iou in iou_values:
                try:
                    detector = MultiBDPanelDetector(
                        weights=str(model_path),
                        conf=conf,
                        iou=iou
                    )
                    
                    total_detections = 0
                    for img_path in test_images:
                        # Charger l'image avec cv2
                        img = cv2.imread(str(img_path))
                        if img is None:
                            continue
                            
                        # Convertir en QImage (simulation)
                        h, w = img.shape[:2]
                        
                        # Simulation simple - on teste juste le mod√®le YOLO directement
                        yolo_results = detector.model.predict(
                            source=img,
                            conf=conf,
                            iou=iou,
                            verbose=False
                        )[0]
                        
                        if yolo_results.boxes is not None:
                            total_detections += len(yolo_results.boxes)
                    
                    avg_detections = total_detections / len(test_images)
                    results.append({
                        'conf': conf,
                        'iou': iou,
                        'avg_detections': avg_detections
                    })
                    
                    print(f"  conf={conf:.1f}, iou={iou:.1f} ‚Üí {avg_detections:.1f} d√©tections/image")
                    
                except Exception as e:
                    print(f"  ‚ùå Erreur conf={conf:.1f}, iou={iou:.1f}: {e}")
        
        # Trouver les meilleurs param√®tres
        if results:
            # Trier par nombre de d√©tections (on veut un √©quilibre)
            results.sort(key=lambda x: abs(x['avg_detections'] - 5.0))  # Id√©al ~5 panels/page
            best = results[0]
            print(f"\nüéØ Param√®tres optimaux sugg√©r√©s:")
            print(f"  Confidence: {best['conf']}")
            print(f"  IoU: {best['iou']}")
            print(f"  D√©tections moyennes: {best['avg_detections']:.1f}")
    
    def suggest_improvements(self):
        """Propose des am√©liorations pour le mod√®le."""
        print("üí° Suggestions d'am√©lioration du mod√®le Multi-BD:\n")
        
        print("üéØ 1. PROBL√àME: Mauvaise diff√©renciation titre/cases")
        print("   Solutions:")
        print("   - Augmenter les donn√©es d'entra√Ænement avec plus d'exemples de titres")
        print("   - Ajouter une classe 'title' ou 'text' au mod√®le")
        print("   - Utiliser des seuils de confiance diff√©rents par classe")
        print("   - Post-traitement: filtrer les d√©tections en haut de page (zone titre)")
        print()
        
        print("üéØ 2. PROBL√àME: Pr√©cision des contours")
        print("   Solutions:")
        print("   - Utiliser YOLO segmentation (YOLOv8-seg) au lieu de detection")
        print("   - Augmenter la r√©solution d'entra√Ænement (640‚Üí832 ou 1024)")
        print("   - Post-traitement: raffiner les contours avec OpenCV")
        print("   - Utiliser plusieurs √©chelles de d√©tection")
        print()
        
        print("üéØ 3. AM√âLIORATIONS IMM√âDIATES")
        print("   A. Ajuster les param√®tres:")
        print("      - Baisser confidence pour d√©tecter plus (0.2 ‚Üí 0.15)")
        print("      - Ajuster IoU selon le style (0.5 ‚Üí 0.4 pour plus de chevauchement)")
        print()
        
        print("   B. Post-traitement intelligent:")
        print("      - Filtrer par position (√©viter zone titre en haut)")
        print("      - Filtrer par ratio aspect (√©viter les lignes de texte)")
        print("      - Merger les d√©tections proches")
        print()
        
        print("   C. Mod√®le hybride:")
        print("      - Combiner Multi-BD + Heuristique OpenCV")
        print("      - Utiliser Multi-BD pour d√©tecter, OpenCV pour raffiner")
        print()
        
    def create_improved_detector(self) -> str:
        """Cr√©e un d√©tecteur Multi-BD am√©lior√©."""
        improved_code = '''
class ImprovedMultiBDDetector(MultiBDPanelDetector):
    """D√©tecteur Multi-BD avec am√©liorations pour titre/contours."""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # Param√®tres optimis√©s
        self.conf = 0.15  # Plus sensible
        self.iou = 0.4    # Plus de chevauchement autoris√©
        
    def detect_panels(self, qimage, page_point_size):
        """D√©tection avec post-traitement am√©lior√©."""
        # D√©tection de base
        raw_panels = super().detect_panels(qimage, page_point_size)
        
        # Post-traitement intelligent
        filtered_panels = []
        page_height = page_point_size.height()
        
        for panel in raw_panels:
            # Filtrer zone titre (20% du haut de la page)
            if panel.y() < page_height * 0.2:
                # V√©rifier le ratio aspect pour diff√©rencier titre/case
                aspect_ratio = panel.width() / panel.height()
                if aspect_ratio > 4.0:  # Ligne de texte probable
                    continue
                    
            # Filtrer les d√©tections trop petites
            min_area = page_height * page_point_size.width() * 0.01  # 1% de la page
            if panel.width() * panel.height() < min_area:
                continue
                
            # Filtrer les ratios aspect anormaux 
            aspect_ratio = panel.width() / panel.height()
            if aspect_ratio > 6.0 or aspect_ratio < 0.15:  # Trop large ou trop √©troit
                continue
                
            filtered_panels.append(panel)
        
        return filtered_panels
        '''
        
        # Sauvegarder le code am√©lior√©
        output_path = Path("tools/improved_multibd_detector.py")
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(improved_code)
            
        print(f"üíæ D√©tecteur am√©lior√© sauv√©: {output_path}")
        return str(output_path)

def main():
    """Point d'entr√©e principal."""
    print("üî¨ AnComicsViewer - Diagnostic Multi-BD")
    print("=" * 50)
    
    diagnostic = MultiBDDiagnostic()
    
    # 1. Lister les mod√®les disponibles
    diagnostic.list_available_models()
    
    # 2. Analyser le mod√®le principal
    diagnostic.analyze_model_performance("multibd_mixed_model")
    print()
    
    # 3. Tester diff√©rents param√®tres
    print("üß™ Test des param√®tres de d√©tection:")
    diagnostic.test_detection_parameters("multibd_mixed_model")
    print()
    
    # 4. Proposer des am√©liorations
    diagnostic.suggest_improvements()
    
    # 5. Cr√©er un d√©tecteur am√©lior√©
    diagnostic.create_improved_detector()

if __name__ == "__main__":
    main()
