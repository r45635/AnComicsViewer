#!/usr/bin/env python3
"""
Test d'int√©gration du cache am√©lior√© dans AnComicsViewer
"""

import os
import sys
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_cache_integration():
    print("üß™ Test Int√©gration Cache Am√©lior√©")
    print("=" * 45)
    
    # Test 1: Import du cache dans AnComicsViewer
    print("1. Test import enhanced_cache...")
    try:
        import enhanced_cache
        print("   ‚úÖ Module enhanced_cache import√©")
        
        # V√©rifier la classe PanelCacheManager
        assert hasattr(enhanced_cache, 'PanelCacheManager')
        print("   ‚úÖ Classe PanelCacheManager disponible")
        
        # Cr√©er une instance pour tester
        cache_manager = enhanced_cache.PanelCacheManager()
        assert cache_manager is not None
        print("   ‚úÖ Instance PanelCacheManager cr√©√©e")
        
    except Exception as e:
        print(f"   ‚ùå Erreur import: {e}")
        return False
    
    # Test 2: V√©rifier l'int√©gration dans AnComicsViewer.py
    print("\n2. Test int√©gration dans AnComicsViewer.py...")
    try:
        with open("AnComicsViewer.py", 'r') as f:
            content = f.read()
        
        # V√©rifier les imports
        if "from enhanced_cache import PanelCacheManager" in content:
            print("   ‚úÖ Import du cache trouv√©")
        else:
            print("   ‚ö†Ô∏è  Import du cache non trouv√©")
        
        # V√©rifier l'initialisation
        if "_enhanced_cache = PanelCacheManager()" in content:
            print("   ‚úÖ Initialisation du cache trouv√©e")
        else:
            print("   ‚ö†Ô∏è  Initialisation du cache non trouv√©e")
        
        # V√©rifier les m√©thodes modifi√©es
        if "cached_panels = self._enhanced_cache.get_panels" in content:
            print("   ‚úÖ Utilisation du cache dans _ensure_panels_for")
        else:
            print("   ‚ö†Ô∏è  Utilisation du cache non trouv√©e")
            
        # V√©rifier le menu cache
        if "Cache" in content and "Statistiques" in content:
            print("   ‚úÖ Menu cache ajout√©")
        else:
            print("   ‚ö†Ô∏è  Menu cache non trouv√©")
            
    except Exception as e:
        print(f"   ‚ùå Erreur lecture fichier: {e}")
        return False
    
    # Test 3: V√©rifier que le r√©pertoire cache sera cr√©√©
    print("\n3. Test cr√©ation r√©pertoire cache...")
    try:
        from pathlib import Path
        cache_dir = Path.home() / ".ancomicsviewer" / "cache"
        
        # Le r√©pertoire devrait exister maintenant
        if cache_dir.exists():
            print(f"   ‚úÖ R√©pertoire cache existe: {cache_dir}")
            
            # Compter les fichiers de cache
            cache_files = list(cache_dir.glob("*.cache"))
            print(f"   üìÅ Fichiers de cache: {len(cache_files)}")
        else:
            print(f"   ‚ÑπÔ∏è  R√©pertoire cache sera cr√©√©: {cache_dir}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur r√©pertoire: {e}")
        return False
    
    # Test 4: Performance du cache sur donn√©es simul√©es
    print("\n4. Test performance cache...")
    try:
        from PySide6.QtCore import QRectF
        
        # Donn√©es test
        test_panels = [
            QRectF(10, 10, 100, 150),
            QRectF(120, 10, 100, 150),
            QRectF(10, 170, 210, 100)
        ]
        
        # Mock detector
        class MockDetector:
            def __init__(self):
                self.confidence = 0.25
                self.min_rect_px = 80
        
        detector = MockDetector()
        pdf_path = "/test/performance.pdf"
        
        # Test vitesse
        import time
        start = time.time()
        
        # Premier acc√®s (miss)
        result1 = cache_manager.get_panels(pdf_path, 0, detector)
        assert result1 is None  # Miss attendu
        
        # Sauvegarde
        cache_manager.save_panels(pdf_path, 0, test_panels, detector)
        
        # Deuxi√®me acc√®s (hit)
        result2 = cache_manager.get_panels(pdf_path, 0, detector)
        assert result2 is not None  # Hit attendu
        assert len(result2) == 3
        
        end = time.time()
        
        # Statistiques
        stats = cache_manager.get_cache_info()
        print(f"   ‚ö° Temps: {(end-start)*1000:.1f}ms")
        print(f"   üìä Hits m√©moire: {stats['stats']['memory_hits']}")
        print(f"   üìä Misses: {stats['stats']['misses']}")
        print(f"   ‚úÖ Performance valid√©e")
        
    except Exception as e:
        print(f"   ‚ùå Erreur performance: {e}")
        return False
    
    print("\nüéâ Tous les tests d'int√©gration pass√©s!")
    print("\nüìã B√©n√©fices du cache am√©lior√©:")
    print("   ‚Ä¢ ‚ö° Cache persistant entre sessions")
    print("   ‚Ä¢ üß† Cache m√©moire pour acc√®s ultra-rapide") 
    print("   ‚Ä¢ üéØ Invalidation intelligente sur changement param√®tres")
    print("   ‚Ä¢ üìä Statistiques d√©taill√©es de performance")
    print("   ‚Ä¢ üßπ Nettoyage automatique des anciens caches")
    print("   ‚Ä¢ üîß Interface de gestion int√©gr√©e dans AnComicsViewer")
    
    return True

if __name__ == "__main__":
    success = test_cache_integration()
    sys.exit(0 if success else 1)
